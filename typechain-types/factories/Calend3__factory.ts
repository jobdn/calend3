/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Calend3, Calend3Interface } from "../Calend3";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_endTime",
        type: "uint256",
      },
    ],
    name: "addAppointment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAppoinments",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "address",
            name: "attendee",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountPaid",
            type: "uint256",
          },
        ],
        internalType: "struct Calend3.Appointment[]",
        name: "_appointments",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610bdc806100616000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806334fcf43714610051578063679aefce1461006d5780639206b2301461008b578063c9f92a67146100a9575b600080fd5b61006b600480360381019061006691906105c3565b6100c5565b005b61007561015f565b60405161008291906107f9565b60405180910390f35b610093610168565b6040516100a09190610797565b60405180910390f35b6100c360048036038101906100be919061055c565b6102cd565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161014c906107b9565b60405180910390fd5b8060008190555050565b60008054905090565b60606002805480602002602001604051908101604052809291908181526020016000905b828210156102c457838290600052602060002090600502016040518060a00160405290816000820180546101bf90610a0d565b80601f01602080910402602001604051908101604052809291908181526020018280546101eb90610a0d565b80156102385780601f1061020d57610100808354040283529160200191610238565b820191906000526020600020905b81548152906001019060200180831161021b57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152602001600382015481526020016004820154815250508152602001906001019061018c565b50505050905090565b6000603c83836102dd919061095b565b6102e791906108d0565b11610327576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031e906107d9565b60405180910390fd5b60026040518060a001604052808581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001600054603c8686610373919061095b565b61037d91906108d0565b6103879190610901565b815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000190805190602001906103cf92919061043c565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015560608201518160030155608082015181600401555050505050565b82805461044890610a0d565b90600052602060002090601f01602090048101928261046a57600085556104b1565b82601f1061048357805160ff19168380011785556104b1565b828001600101855582156104b1579182015b828111156104b0578251825591602001919060010190610495565b5b5090506104be91906104c2565b5090565b5b808211156104db5760008160009055506001016104c3565b5090565b60006104f26104ed84610839565b610814565b90508281526020810184848401111561050a57600080fd5b6105158482856109cb565b509392505050565b600082601f83011261052e57600080fd5b813561053e8482602086016104df565b91505092915050565b60008135905061055681610b8f565b92915050565b60008060006060848603121561057157600080fd5b600084013567ffffffffffffffff81111561058b57600080fd5b6105978682870161051d565b93505060206105a886828701610547565b92505060406105b986828701610547565b9150509250925092565b6000602082840312156105d557600080fd5b60006105e384828501610547565b91505092915050565b60006105f88383610703565b905092915050565b6106098161098f565b82525050565b600061061a8261087a565b610624818561089d565b9350836020820285016106368561086a565b8060005b85811015610672578484038952815161065385826105ec565b945061065e83610890565b925060208a0199505060018101905061063a565b50829750879550505050505092915050565b600061068f82610885565b61069981856108ae565b93506106a98185602086016109da565b6106b281610b2c565b840191505092915050565b60006106ca6012836108bf565b91506106d582610b3d565b602082019050919050565b60006106ed6015836108bf565b91506106f882610b66565b602082019050919050565b600060a08301600083015184820360008601526107208282610684565b91505060208301516107356020860182610600565b5060408301516107486040860182610779565b50606083015161075b6060860182610779565b50608083015161076e6080860182610779565b508091505092915050565b610782816109c1565b82525050565b610791816109c1565b82525050565b600060208201905081810360008301526107b1818461060f565b905092915050565b600060208201905081810360008301526107d2816106bd565b9050919050565b600060208201905081810360008301526107f2816106e0565b9050919050565b600060208201905061080e6000830184610788565b92915050565b600061081e61082f565b905061082a8282610a3f565b919050565b6000604051905090565b600067ffffffffffffffff82111561085457610853610afd565b5b61085d82610b2c565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b60006108db826109c1565b91506108e6836109c1565b9250826108f6576108f5610a9f565b5b828204905092915050565b600061090c826109c1565b9150610917836109c1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156109505761094f610a70565b5b828202905092915050565b6000610966826109c1565b9150610971836109c1565b92508282101561098457610983610a70565b5b828203905092915050565b600061099a826109a1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156109f85780820151818401526020810190506109dd565b83811115610a07576000848401525b50505050565b60006002820490506001821680610a2557607f821691505b60208210811415610a3957610a38610ace565b5b50919050565b610a4882610b2c565b810181811067ffffffffffffffff82111715610a6757610a66610afd565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f43616c656e64333a206e6f74206f776e65720000000000000000000000000000600082015250565b7f43616c656e64333a20696e76616c69642074696d650000000000000000000000600082015250565b610b98816109c1565b8114610ba357600080fd5b5056fea2646970667358221220d82464651be8ffb283d69e5600fdc5e15713f2dc6912aca9c93af81f8b3824ab64736f6c63430008040033";

type Calend3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Calend3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Calend3__factory extends ContractFactory {
  constructor(...args: Calend3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Calend3> {
    return super.deploy(overrides || {}) as Promise<Calend3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Calend3 {
    return super.attach(address) as Calend3;
  }
  override connect(signer: Signer): Calend3__factory {
    return super.connect(signer) as Calend3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Calend3Interface {
    return new utils.Interface(_abi) as Calend3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Calend3 {
    return new Contract(address, _abi, signerOrProvider) as Calend3;
  }
}

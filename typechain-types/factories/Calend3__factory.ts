/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Calend3, Calend3Interface } from "../Calend3";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_endTime",
        type: "uint256",
      },
    ],
    name: "addAppointment",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAppoinments",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "address",
            name: "attendee",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "amountPaid",
            type: "uint256",
          },
        ],
        internalType: "struct Calend3.Appointment[]",
        name: "_appointments",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f79806100616000396000f3fe60806040526004361061004a5760003560e01c806334fcf4371461004f578063679aefce146100785780638da5cb5b146100a35780639206b230146100ce578063c9f92a67146100f9575b600080fd5b34801561005b57600080fd5b506100766004803603810190610071919061079a565b610115565b005b34801561008457600080fd5b5061008d6101af565b60405161009a9190610afb565b60405180910390f35b3480156100af57600080fd5b506100b86101b8565b6040516100c59190610a1e565b60405180910390f35b3480156100da57600080fd5b506100e36101de565b6040516100f09190610a39565b60405180910390f35b610113600480360381019061010e9190610733565b610343565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019c90610a7b565b60405180910390fd5b8060008190555050565b60008054905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606002805480602002602001604051908101604052809291908181526020016000905b8282101561033a57838290600052602060002090600502016040518060a001604052908160008201805461023590610d2c565b80601f016020809104026020016040519081016040528092919081815260200182805461026190610d2c565b80156102ae5780601f10610283576101008083540402835291602001916102ae565b820191906000526020600020905b81548152906001019060200180831161029157829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282015481526020016003820154815260200160048201548152505081526020019060010190610202565b50505050905090565b600080541415610388576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037f90610adb565b60405180910390fd5b6000603c83836103989190610c68565b6103a29190610bdd565b116103e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d990610a9b565b60405180910390fd5b60006040518060a001604052808581526020013373ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001600054603c868661042e9190610c68565b6104389190610bdd565b6104429190610c0e565b8152509050806080015134101561048e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048590610a5b565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16346040516104d690610a09565b60006040518083038185875af1925050503d8060008114610513576040519150601f19603f3d011682016040523d82523d6000602084013e610518565b606091505b505090508061055c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055390610abb565b60405180910390fd5b600282908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000190805190602001906105a4929190610613565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301556080820151816004015550505050505050565b82805461061f90610d2c565b90600052602060002090601f0160209004810192826106415760008555610688565b82601f1061065a57805160ff1916838001178555610688565b82800160010185558215610688579182015b8281111561068757825182559160200191906001019061066c565b5b5090506106959190610699565b5090565b5b808211156106b257600081600090555060010161069a565b5090565b60006106c96106c484610b3b565b610b16565b9050828152602081018484840111156106e157600080fd5b6106ec848285610cea565b509392505050565b600082601f83011261070557600080fd5b81356107158482602086016106b6565b91505092915050565b60008135905061072d81610f2c565b92915050565b60008060006060848603121561074857600080fd5b600084013567ffffffffffffffff81111561076257600080fd5b61076e868287016106f4565b935050602061077f8682870161071e565b92505060406107908682870161071e565b9150509250925092565b6000602082840312156107ac57600080fd5b60006107ba8482850161071e565b91505092915050565b60006107cf8383610975565b905092915050565b6107e081610cae565b82525050565b6107ef81610c9c565b82525050565b600061080082610b7c565b61080a8185610b9f565b93508360208202850161081c85610b6c565b8060005b85811015610858578484038952815161083985826107c3565b945061084483610b92565b925060208a01995050600181019050610820565b50829750879550505050505092915050565b600061087582610b87565b61087f8185610bbb565b935061088f818560208601610cf9565b61089881610e4b565b840191505092915050565b60006108b0601983610bcc565b91506108bb82610e5c565b602082019050919050565b60006108d3601283610bcc565b91506108de82610e85565b602082019050919050565b60006108f6601583610bcc565b915061090182610eae565b602082019050919050565b6000610919601283610bcc565b915061092482610ed7565b602082019050919050565b600061093c600083610bb0565b915061094782610f00565b600082019050919050565b600061095f601583610bcc565b915061096a82610f03565b602082019050919050565b600060a0830160008301518482036000860152610992828261086a565b91505060208301516109a760208601826107e6565b5060408301516109ba60408601826109eb565b5060608301516109cd60608601826109eb565b5060808301516109e060808601826109eb565b508091505092915050565b6109f481610ce0565b82525050565b610a0381610ce0565b82525050565b6000610a148261092f565b9150819050919050565b6000602082019050610a3360008301846107d7565b92915050565b60006020820190508181036000830152610a5381846107f5565b905092915050565b60006020820190508181036000830152610a74816108a3565b9050919050565b60006020820190508181036000830152610a94816108c6565b9050919050565b60006020820190508181036000830152610ab4816108e9565b9050919050565b60006020820190508181036000830152610ad48161090c565b9050919050565b60006020820190508181036000830152610af481610952565b9050919050565b6000602082019050610b1060008301846109fa565b92915050565b6000610b20610b31565b9050610b2c8282610d5e565b919050565b6000604051905090565b600067ffffffffffffffff821115610b5657610b55610e1c565b5b610b5f82610e4b565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610be882610ce0565b9150610bf383610ce0565b925082610c0357610c02610dbe565b5b828204905092915050565b6000610c1982610ce0565b9150610c2483610ce0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c5d57610c5c610d8f565b5b828202905092915050565b6000610c7382610ce0565b9150610c7e83610ce0565b925082821015610c9157610c90610d8f565b5b828203905092915050565b6000610ca782610cc0565b9050919050565b6000610cb982610cc0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610d17578082015181840152602081019050610cfc565b83811115610d26576000848401525b50505050565b60006002820490506001821680610d4457607f821691505b60208210811415610d5857610d57610ded565b5b50919050565b610d6782610e4b565b810181811067ffffffffffffffff82111715610d8657610d85610e1c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f43616c656e64333a2072657175697265206d6f72652065746800000000000000600082015250565b7f43616c656e64333a206e6f74206f776e65720000000000000000000000000000600082015250565b7f43616c656e64333a20696e76616c69642074696d650000000000000000000000600082015250565b7f43616c656e64333a2073656e64206661696c0000000000000000000000000000600082015250565b50565b7f43616c656e64333a2072617465206973207a65726f0000000000000000000000600082015250565b610f3581610ce0565b8114610f4057600080fd5b5056fea2646970667358221220c9fd941372cb77ce82972e859d93234220f1be05c8ef49021f801cdbb2034a6664736f6c63430008040033";

type Calend3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Calend3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Calend3__factory extends ContractFactory {
  constructor(...args: Calend3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Calend3> {
    return super.deploy(overrides || {}) as Promise<Calend3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Calend3 {
    return super.attach(address) as Calend3;
  }
  override connect(signer: Signer): Calend3__factory {
    return super.connect(signer) as Calend3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Calend3Interface {
    return new utils.Interface(_abi) as Calend3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Calend3 {
    return new Contract(address, _abi, signerOrProvider) as Calend3;
  }
}
